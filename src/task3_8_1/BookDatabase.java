package task3_8_1;

import java.sql.*;

public class BookDatabase {
    public static void main(String[] args) {
        String url = "jdbc:sqlite:books.db";

        try (Connection conn = DriverManager.getConnection(url)) {
            if (conn != null) {
                enableForeignKeys(conn);
                createGenresTable(conn);
                insertGenre(conn, "–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è");
                insertGenre(conn, "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞");

                createBooksTable(conn);
                insertBook(conn, "1984", 1949, "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª", 1);
                insertBook(conn, "–û –¥–∏–≤–Ω—ã–π –Ω–æ–≤—ã–π –º–∏—Ä", 1932, "–•–∞–∫—Å–ª–∏ –û–ª–¥–æ—Å –õ–µ–æ–Ω–∞—Ä–¥", 1);
                insertBook(conn, "451' –ø–æ –§–∞—Ä–µ–Ω–≥–µ–π—Ç—É", 1953, "–†—ç–π –ë—Ä—ç–¥–±–µ—Ä–∏", 1);

                manageGenres(conn);

                System.out.println("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∂–∞–Ω—Ä—ã –∏ –∫–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.");
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    private static void enableForeignKeys(Connection conn) throws SQLException {
        try (Statement stmt = conn.createStatement()) {
            stmt.execute("PRAGMA foreign_keys = ON");
        }
    }

    private static void createGenresTable(Connection conn) throws SQLException {
        String sql = """
                    CREATE TABLE IF NOT EXISTS genres (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        genre TEXT NOT NULL
                    );
                """;
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        }
    }

    private static void insertGenre(Connection conn, String genre) throws SQLException {
        String sql = "INSERT INTO genres(genre) VALUES (?)";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, genre);
            pstmt.executeUpdate();
        }
    }

    private static void createBooksTable(Connection conn) throws SQLException {
        String sql = """
                    CREATE TABLE IF NOT EXISTS books (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        title TEXT NOT NULL,
                        year INTEGER,
                        author TEXT,
                        genre_id INTEGER,
                        FOREIGN KEY (genre_id) REFERENCES genres(id)
                    );
                """;
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        }
    }

    private static void insertBook(Connection conn, String title, int year, String author, int genreId) throws SQLException {
        String sql = "INSERT INTO books(title, year, author, genre_id) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, title);
            pstmt.setInt(2, year);
            pstmt.setString(3, author);
            pstmt.setInt(4, genreId);
            pstmt.executeUpdate();
        }
    }

    // üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤
    private static void manageGenres(Connection conn) throws SQLException {
        int newGenreId = insertGenreReturnId(conn, "–î–µ—Ç–µ–∫—Ç–∏–≤");
        System.out.println("–î–æ–±–∞–≤–ª–µ–Ω –∂–∞–Ω—Ä '–î–µ—Ç–µ–∫—Ç–∏–≤' —Å id = " + newGenreId);

        deleteGenre(conn, newGenreId);

        deleteGenre(conn, 1);
    }

    private static int insertGenreReturnId(Connection conn, String genre) throws SQLException {
        String sql = "INSERT INTO genres(genre) VALUES (?)";
        try (PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, genre);
            pstmt.executeUpdate();
            ResultSet rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return -1;
    }

    private static void deleteGenre(Connection conn, int genreId) {
        String sql = "DELETE FROM genres WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, genreId);
            pstmt.executeUpdate();
            System.out.println("–ñ–∞–Ω—Ä —Å id = " + genreId + " —É–¥–∞–ª—ë–Ω.");
        } catch (SQLException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–∞–Ω—Ä–∞ —Å id = " + genreId + ": " + e.getMessage());
        }
    }
}